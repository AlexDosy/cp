bubble sort-
   this sorting algortihm is o(n2) for time complexity- uses two for loops compares adjacent elements throught and get the sorted array.  for (i=0;i<n-1;i++){ for(j=0;j<n-i-1;j++){}}

selection sort-
   this sorting algo is also o(n2) for time complex. - use two for loops considering first element as minimum value and search throught for othe small elements. for (i=0;i<n-1;i++){ for(j=i+1;j<n;j++){}}

insertion sort- 
   this sorting algo is also o(n2) for time complex. - use a for loop and a while loop for algo. consider whole array as sorted and unsorted and inserts smallest element to coorect position. 
    for(i=1;i<n;i++){ int j=i-1; int current=arr[i]; while(j>=0 && arr[j]>key){j--;}}

    

21/10
LINKED LIST - connected nodes and each node has a value and an address
    LinkedList list= new LinkedList();
   addFirst()
   addLast()
   contains()
   indexOf()
   size() 
arranging odd and even node on top of eachother
using two pointers

22/10
reversing linked list - use two pointers prev=null, curr= head while(curr!=null) 
finding maxTwinSum ith and n-1-ith:
   we need to get half on linkedlist using two pointer fast and slow, after reverse from the slow, then add that linked list with head while(secondhalf!=null) return max of the sum

23/10
bINARY TREE
   maxdepth of binary tree recursive fn- left and right node equates to null add 1 to max of depths
   leaf similar return boolean if two binary tree nodes leaf node are same- recursive fn same as above two variable for equating leaves
      getting the leaves in another fn recursive DFS algorithm


15/01
Arrys, Hashmap:
   encoding and decoding by adding length of each string at begining followed by hash
   anagrams
   top k elements using bucket sort and hashmap reduced complexity to o(n)

16/01
   prod of all elements without index element to store at index: using prefix and postfix and multiplying togetherin the same array  o(n) 
   while bruteforce aproach takes o(n^2) and its using if, continues statements
   Valid Sudoku :
      bruteforce validate rows, colums, square in range(9) individually
      while using hashmap, and checking using intializing dict using collections.defaultdict(set) and checking for rows , column, for square we did a neet trick of int dividing r and c with 3 (sqaure is 3*3)
      this gave [(0-2,0-2)] posibile sqaure and validate hashmap like that 
   longest sequence:
      while bruteforce can be done using curr, streak
      o(n) algo is using set and check if i-1 exist in that set, and proceed with the same stuff length iis added and checked and max of logest and length is returned
   

  
